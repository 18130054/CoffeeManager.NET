#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManagerCoffee
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MNCOFFEE")]
	public partial class DataBaseCoffeeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertFoodCategory(FoodCategory instance);
    partial void UpdateFoodCategory(FoodCategory instance);
    partial void DeleteFoodCategory(FoodCategory instance);
    partial void InsertAccountType(AccountType instance);
    partial void UpdateAccountType(AccountType instance);
    partial void DeleteAccountType(AccountType instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertBillInfo(BillInfo instance);
    partial void UpdateBillInfo(BillInfo instance);
    partial void DeleteBillInfo(BillInfo instance);
    partial void InsertdetailFood(detailFood instance);
    partial void UpdatedetailFood(detailFood instance);
    partial void DeletedetailFood(detailFood instance);
    partial void InsertFood(Food instance);
    partial void UpdateFood(Food instance);
    partial void DeleteFood(Food instance);
    #endregion
		
		public DataBaseCoffeeDataContext() : 
				base(global::ManagerCoffee.Properties.Settings.Default.MNCOFFEEConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseCoffeeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseCoffeeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseCoffeeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataBaseCoffeeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<FoodCategory> FoodCategories
		{
			get
			{
				return this.GetTable<FoodCategory>();
			}
		}
		
		public System.Data.Linq.Table<AccountType> AccountTypes
		{
			get
			{
				return this.GetTable<AccountType>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<BillInfo> BillInfos
		{
			get
			{
				return this.GetTable<BillInfo>();
			}
		}
		
		public System.Data.Linq.Table<detailFood> detailFoods
		{
			get
			{
				return this.GetTable<detailFood>();
			}
		}
		
		public System.Data.Linq.Table<Food> Foods
		{
			get
			{
				return this.GetTable<Food>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAccount;
		
		private System.Nullable<int> _idAccountType;
		
		private string _full_name;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _dateofbird;
		
		private System.DateTime _startdate;
		
		private System.Nullable<System.DateTime> _enddate;
		
		private string _address;
		
		private System.Nullable<decimal> _numberphone;
		
		private EntitySet<Bill> _Bills;
		
		private EntityRef<AccountType> _AccountType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAccountChanging(int value);
    partial void OnidAccountChanged();
    partial void OnidAccountTypeChanging(System.Nullable<int> value);
    partial void OnidAccountTypeChanged();
    partial void Onfull_nameChanging(string value);
    partial void Onfull_nameChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndateofbirdChanging(System.Nullable<System.DateTime> value);
    partial void OndateofbirdChanged();
    partial void OnstartdateChanging(System.DateTime value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnenddateChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnnumberphoneChanging(System.Nullable<decimal> value);
    partial void OnnumberphoneChanged();
    #endregion
		
		public Account()
		{
			this._Bills = new EntitySet<Bill>(new Action<Bill>(this.attach_Bills), new Action<Bill>(this.detach_Bills));
			this._AccountType = default(EntityRef<AccountType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccount", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAccount
		{
			get
			{
				return this._idAccount;
			}
			set
			{
				if ((this._idAccount != value))
				{
					this.OnidAccountChanging(value);
					this.SendPropertyChanging();
					this._idAccount = value;
					this.SendPropertyChanged("idAccount");
					this.OnidAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccountType", DbType="Int")]
		public System.Nullable<int> idAccountType
		{
			get
			{
				return this._idAccountType;
			}
			set
			{
				if ((this._idAccountType != value))
				{
					if (this._AccountType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._idAccountType = value;
					this.SendPropertyChanged("idAccountType");
					this.OnidAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_full_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string full_name
		{
			get
			{
				return this._full_name;
			}
			set
			{
				if ((this._full_name != value))
				{
					this.Onfull_nameChanging(value);
					this.SendPropertyChanging();
					this._full_name = value;
					this.SendPropertyChanged("full_name");
					this.Onfull_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateofbird", DbType="Date")]
		public System.Nullable<System.DateTime> dateofbird
		{
			get
			{
				return this._dateofbird;
			}
			set
			{
				if ((this._dateofbird != value))
				{
					this.OndateofbirdChanging(value);
					this.SendPropertyChanging();
					this._dateofbird = value;
					this.SendPropertyChanged("dateofbird");
					this.OndateofbirdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startdate", DbType="Date NOT NULL")]
		public System.DateTime startdate
		{
			get
			{
				return this._startdate;
			}
			set
			{
				if ((this._startdate != value))
				{
					this.OnstartdateChanging(value);
					this.SendPropertyChanging();
					this._startdate = value;
					this.SendPropertyChanged("startdate");
					this.OnstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enddate", DbType="Date")]
		public System.Nullable<System.DateTime> enddate
		{
			get
			{
				return this._enddate;
			}
			set
			{
				if ((this._enddate != value))
				{
					this.OnenddateChanging(value);
					this.SendPropertyChanging();
					this._enddate = value;
					this.SendPropertyChanged("enddate");
					this.OnenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(1000)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numberphone", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> numberphone
		{
			get
			{
				return this._numberphone;
			}
			set
			{
				if ((this._numberphone != value))
				{
					this.OnnumberphoneChanging(value);
					this.SendPropertyChanging();
					this._numberphone = value;
					this.SendPropertyChanged("numberphone");
					this.OnnumberphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bill", Storage="_Bills", ThisKey="idAccount", OtherKey="idAccount")]
		public EntitySet<Bill> Bills
		{
			get
			{
				return this._Bills;
			}
			set
			{
				this._Bills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_AccountType", ThisKey="idAccountType", OtherKey="idAccountType", IsForeignKey=true)]
		public AccountType AccountType
		{
			get
			{
				return this._AccountType.Entity;
			}
			set
			{
				AccountType previousValue = this._AccountType.Entity;
				if (((previousValue != value) 
							|| (this._AccountType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountType.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountType.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._idAccountType = value.idAccountType;
					}
					else
					{
						this._idAccountType = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Bills(Bill entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoodCategory")]
	public partial class FoodCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idcategory;
		
		private string _namecategory;
		
		private int _orther;
		
		private EntitySet<Food> _Foods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidcategoryChanging(int value);
    partial void OnidcategoryChanged();
    partial void OnnamecategoryChanging(string value);
    partial void OnnamecategoryChanged();
    partial void OnortherChanging(int value);
    partial void OnortherChanged();
    #endregion
		
		public FoodCategory()
		{
			this._Foods = new EntitySet<Food>(new Action<Food>(this.attach_Foods), new Action<Food>(this.detach_Foods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcategory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idcategory
		{
			get
			{
				return this._idcategory;
			}
			set
			{
				if ((this._idcategory != value))
				{
					this.OnidcategoryChanging(value);
					this.SendPropertyChanging();
					this._idcategory = value;
					this.SendPropertyChanged("idcategory");
					this.OnidcategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_namecategory", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string namecategory
		{
			get
			{
				return this._namecategory;
			}
			set
			{
				if ((this._namecategory != value))
				{
					this.OnnamecategoryChanging(value);
					this.SendPropertyChanging();
					this._namecategory = value;
					this.SendPropertyChanged("namecategory");
					this.OnnamecategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orther", DbType="Int NOT NULL")]
		public int orther
		{
			get
			{
				return this._orther;
			}
			set
			{
				if ((this._orther != value))
				{
					this.OnortherChanging(value);
					this.SendPropertyChanging();
					this._orther = value;
					this.SendPropertyChanged("orther");
					this.OnortherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_Foods", ThisKey="idcategory", OtherKey="idcategory")]
		public EntitySet<Food> Foods
		{
			get
			{
				return this._Foods;
			}
			set
			{
				this._Foods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategory = this;
		}
		
		private void detach_Foods(Food entity)
		{
			this.SendPropertyChanging();
			entity.FoodCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountType")]
	public partial class AccountType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAccountType;
		
		private string _nameType;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAccountTypeChanging(int value);
    partial void OnidAccountTypeChanged();
    partial void OnnameTypeChanging(string value);
    partial void OnnameTypeChanged();
    #endregion
		
		public AccountType()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccountType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAccountType
		{
			get
			{
				return this._idAccountType;
			}
			set
			{
				if ((this._idAccountType != value))
				{
					this.OnidAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._idAccountType = value;
					this.SendPropertyChanged("idAccountType");
					this.OnidAccountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameType", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string nameType
		{
			get
			{
				return this._nameType;
			}
			set
			{
				if ((this._nameType != value))
				{
					this.OnnameTypeChanging(value);
					this.SendPropertyChanging();
					this._nameType = value;
					this.SendPropertyChanged("nameType");
					this.OnnameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountType_Account", Storage="_Accounts", ThisKey="idAccountType", OtherKey="idAccountType")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idbill;
		
		private int _idAccount;
		
		private System.Nullable<decimal> _total;
		
		private System.Nullable<System.DateTime> _founding;
		
		private System.Nullable<decimal> _discount;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidbillChanging(int value);
    partial void OnidbillChanged();
    partial void OnidAccountChanging(int value);
    partial void OnidAccountChanged();
    partial void OntotalChanging(System.Nullable<decimal> value);
    partial void OntotalChanged();
    partial void OnfoundingChanging(System.Nullable<System.DateTime> value);
    partial void OnfoundingChanged();
    partial void OndiscountChanging(System.Nullable<decimal> value);
    partial void OndiscountChanged();
    #endregion
		
		public Bill()
		{
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idbill", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idbill
		{
			get
			{
				return this._idbill;
			}
			set
			{
				if ((this._idbill != value))
				{
					this.OnidbillChanging(value);
					this.SendPropertyChanging();
					this._idbill = value;
					this.SendPropertyChanged("idbill");
					this.OnidbillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAccount", DbType="Int NOT NULL")]
		public int idAccount
		{
			get
			{
				return this._idAccount;
			}
			set
			{
				if ((this._idAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidAccountChanging(value);
					this.SendPropertyChanging();
					this._idAccount = value;
					this.SendPropertyChanged("idAccount");
					this.OnidAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_founding", DbType="DateTime")]
		public System.Nullable<System.DateTime> founding
		{
			get
			{
				return this._founding;
			}
			set
			{
				if ((this._founding != value))
				{
					this.OnfoundingChanging(value);
					this.SendPropertyChanging();
					this._founding = value;
					this.SendPropertyChanged("founding");
					this.OnfoundingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if ((this._discount != value))
				{
					this.OndiscountChanging(value);
					this.SendPropertyChanging();
					this._discount = value;
					this.SendPropertyChanged("discount");
					this.OndiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_BillInfos", ThisKey="idbill", OtherKey="idbill")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Bill", Storage="_Account", ThisKey="idAccount", OtherKey="idAccount", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Bills.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Bills.Add(this);
						this._idAccount = value.idAccount;
					}
					else
					{
						this._idAccount = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillInfo")]
	public partial class BillInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idbillInfor;
		
		private int _idbill;
		
		private int _iddetail;
		
		private int _amount;
		
		private double _price;
		
		private EntityRef<Bill> _Bill;
		
		private EntityRef<detailFood> _detailFood;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidbillInforChanging(int value);
    partial void OnidbillInforChanged();
    partial void OnidbillChanging(int value);
    partial void OnidbillChanged();
    partial void OniddetailChanging(int value);
    partial void OniddetailChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    #endregion
		
		public BillInfo()
		{
			this._Bill = default(EntityRef<Bill>);
			this._detailFood = default(EntityRef<detailFood>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idbillInfor", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idbillInfor
		{
			get
			{
				return this._idbillInfor;
			}
			set
			{
				if ((this._idbillInfor != value))
				{
					this.OnidbillInforChanging(value);
					this.SendPropertyChanging();
					this._idbillInfor = value;
					this.SendPropertyChanged("idbillInfor");
					this.OnidbillInforChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idbill", DbType="Int NOT NULL")]
		public int idbill
		{
			get
			{
				return this._idbill;
			}
			set
			{
				if ((this._idbill != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidbillChanging(value);
					this.SendPropertyChanging();
					this._idbill = value;
					this.SendPropertyChanged("idbill");
					this.OnidbillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iddetail", DbType="Int NOT NULL")]
		public int iddetail
		{
			get
			{
				return this._iddetail;
			}
			set
			{
				if ((this._iddetail != value))
				{
					if (this._detailFood.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OniddetailChanging(value);
					this.SendPropertyChanging();
					this._iddetail = value;
					this.SendPropertyChanged("iddetail");
					this.OniddetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillInfo", Storage="_Bill", ThisKey="idbill", OtherKey="idbill", IsForeignKey=true)]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._idbill = value.idbill;
					}
					else
					{
						this._idbill = default(int);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="detailFood_BillInfo", Storage="_detailFood", ThisKey="iddetail", OtherKey="iddetail", IsForeignKey=true)]
		public detailFood detailFood
		{
			get
			{
				return this._detailFood.Entity;
			}
			set
			{
				detailFood previousValue = this._detailFood.Entity;
				if (((previousValue != value) 
							|| (this._detailFood.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._detailFood.Entity = null;
						previousValue.BillInfos.Remove(this);
					}
					this._detailFood.Entity = value;
					if ((value != null))
					{
						value.BillInfos.Add(this);
						this._iddetail = value.iddetail;
					}
					else
					{
						this._iddetail = default(int);
					}
					this.SendPropertyChanged("detailFood");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.detailFood")]
	public partial class detailFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _iddetail;
		
		private int _idfood;
		
		private string _size;
		
		private System.Nullable<decimal> _price;
		
		private string _status;
		
		private EntitySet<BillInfo> _BillInfos;
		
		private EntityRef<Food> _Food;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OniddetailChanging(int value);
    partial void OniddetailChanged();
    partial void OnidfoodChanging(int value);
    partial void OnidfoodChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public detailFood()
		{
			this._BillInfos = new EntitySet<BillInfo>(new Action<BillInfo>(this.attach_BillInfos), new Action<BillInfo>(this.detach_BillInfos));
			this._Food = default(EntityRef<Food>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iddetail", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int iddetail
		{
			get
			{
				return this._iddetail;
			}
			set
			{
				if ((this._iddetail != value))
				{
					this.OniddetailChanging(value);
					this.SendPropertyChanging();
					this._iddetail = value;
					this.SendPropertyChanged("iddetail");
					this.OniddetailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idfood", DbType="Int NOT NULL")]
		public int idfood
		{
			get
			{
				return this._idfood;
			}
			set
			{
				if ((this._idfood != value))
				{
					if (this._Food.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidfoodChanging(value);
					this.SendPropertyChanging();
					this._idfood = value;
					this.SendPropertyChanged("idfood");
					this.OnidfoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="detailFood_BillInfo", Storage="_BillInfos", ThisKey="iddetail", OtherKey="iddetail")]
		public EntitySet<BillInfo> BillInfos
		{
			get
			{
				return this._BillInfos;
			}
			set
			{
				this._BillInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_detailFood", Storage="_Food", ThisKey="idfood", OtherKey="idfood", IsForeignKey=true)]
		public Food Food
		{
			get
			{
				return this._Food.Entity;
			}
			set
			{
				Food previousValue = this._Food.Entity;
				if (((previousValue != value) 
							|| (this._Food.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food.Entity = null;
						previousValue.detailFoods.Remove(this);
					}
					this._Food.Entity = value;
					if ((value != null))
					{
						value.detailFoods.Add(this);
						this._idfood = value.idfood;
					}
					else
					{
						this._idfood = default(int);
					}
					this.SendPropertyChanged("Food");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.detailFood = this;
		}
		
		private void detach_BillInfos(BillInfo entity)
		{
			this.SendPropertyChanging();
			entity.detailFood = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food")]
	public partial class Food : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idfood;
		
		private int _idcategory;
		
		private string _foodname;
		
		private int _orther;
		
		private EntitySet<detailFood> _detailFoods;
		
		private EntityRef<FoodCategory> _FoodCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidfoodChanging(int value);
    partial void OnidfoodChanged();
    partial void OnidcategoryChanging(int value);
    partial void OnidcategoryChanged();
    partial void OnfoodnameChanging(string value);
    partial void OnfoodnameChanged();
    partial void OnortherChanging(int value);
    partial void OnortherChanged();
    #endregion
		
		public Food()
		{
			this._detailFoods = new EntitySet<detailFood>(new Action<detailFood>(this.attach_detailFoods), new Action<detailFood>(this.detach_detailFoods));
			this._FoodCategory = default(EntityRef<FoodCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idfood", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idfood
		{
			get
			{
				return this._idfood;
			}
			set
			{
				if ((this._idfood != value))
				{
					this.OnidfoodChanging(value);
					this.SendPropertyChanging();
					this._idfood = value;
					this.SendPropertyChanged("idfood");
					this.OnidfoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idcategory", DbType="Int NOT NULL")]
		public int idcategory
		{
			get
			{
				return this._idcategory;
			}
			set
			{
				if ((this._idcategory != value))
				{
					if (this._FoodCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidcategoryChanging(value);
					this.SendPropertyChanging();
					this._idcategory = value;
					this.SendPropertyChanged("idcategory");
					this.OnidcategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foodname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string foodname
		{
			get
			{
				return this._foodname;
			}
			set
			{
				if ((this._foodname != value))
				{
					this.OnfoodnameChanging(value);
					this.SendPropertyChanging();
					this._foodname = value;
					this.SendPropertyChanged("foodname");
					this.OnfoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orther", DbType="Int NOT NULL")]
		public int orther
		{
			get
			{
				return this._orther;
			}
			set
			{
				if ((this._orther != value))
				{
					this.OnortherChanging(value);
					this.SendPropertyChanging();
					this._orther = value;
					this.SendPropertyChanged("orther");
					this.OnortherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_detailFood", Storage="_detailFoods", ThisKey="idfood", OtherKey="idfood")]
		public EntitySet<detailFood> detailFoods
		{
			get
			{
				return this._detailFoods;
			}
			set
			{
				this._detailFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FoodCategory_Food", Storage="_FoodCategory", ThisKey="idcategory", OtherKey="idcategory", IsForeignKey=true)]
		public FoodCategory FoodCategory
		{
			get
			{
				return this._FoodCategory.Entity;
			}
			set
			{
				FoodCategory previousValue = this._FoodCategory.Entity;
				if (((previousValue != value) 
							|| (this._FoodCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FoodCategory.Entity = null;
						previousValue.Foods.Remove(this);
					}
					this._FoodCategory.Entity = value;
					if ((value != null))
					{
						value.Foods.Add(this);
						this._idcategory = value.idcategory;
					}
					else
					{
						this._idcategory = default(int);
					}
					this.SendPropertyChanged("FoodCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_detailFoods(detailFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = this;
		}
		
		private void detach_detailFoods(detailFood entity)
		{
			this.SendPropertyChanging();
			entity.Food = null;
		}
	}
}
#pragma warning restore 1591
